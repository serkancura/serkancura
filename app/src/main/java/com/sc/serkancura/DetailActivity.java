package com.sc.serkancura;

import android.app.ActionBar;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.ShareActionProvider;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.Tracker;
import com.sc.serkancura.parser.RSSFeed;

import java.util.HashMap;
import java.util.Map;

public class DetailActivity extends FragmentActivity {

	RSSFeed feed;
	int pos;
	private DescAdapter adapter;
	private ViewPager pager;
	private ShareActionProvider mShareActionProvider;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.detail);

		ActionBar actionBar = getActionBar();
		actionBar.setDisplayHomeAsUpEnabled(true);

		// Get the feed object and the position from the Intent
		feed = (RSSFeed) getIntent().getExtras().get("feed");
		pos = getIntent().getExtras().getInt("pos");

		// Initialize the views
		adapter = new DescAdapter(getSupportFragmentManager());
		pager = (ViewPager) findViewById(R.id.pager);

		// Set Adapter to pager:
		pager.setAdapter(adapter);
		pager.setCurrentItem(pos);

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		new MenuInflater(this).inflate(R.menu.activity_desc, menu);

		// Locate MenuItem with ShareActionProvider
		MenuItem shareItem = menu.findItem(R.id.share_option);

		// Fetch and store ShareActionProvider
		mShareActionProvider = (ShareActionProvider) shareItem
				.getActionProvider();

		Intent shareIntent = new Intent(Intent.ACTION_SEND);
		shareIntent.setType("text/plain");
		shareIntent.putExtra(Intent.EXTRA_SUBJECT, "RSS Reader");
		String shareBody = feed.getItem(pos).getTitle() + "\n"
				+ feed.getItem(pos).getDescription();
		shareIntent.putExtra(Intent.EXTRA_TEXT, shareBody);

		// Set the share intent
		mShareActionProvider.setShareIntent(shareIntent);

		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {

		case android.R.id.home:
			// app icon in action bar clicked; finish activity to go home
			finish();
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public class DescAdapter extends FragmentStatePagerAdapter {
		public DescAdapter(FragmentManager fm) {
			super(fm);
		}

		@Override
		public int getCount() {
			return feed.getItemCount();
		}

		@Override
		public Fragment getItem(int position) {

			DetailFragment frag = new DetailFragment();

			Bundle bundle = new Bundle();
			bundle.putSerializable("feed", feed);
			bundle.putInt("pos", position);
			frag.setArguments(bundle);

			return frag;

		}

	}

	/**
     * A collection of Google Analytics trackers. Fetch the tracker you need using
     * {@code AnalyticsTrackers.getInstance().get(...)}
     * <p/>
     * This code was generated by Android Studio but can be safely modified by
     * hand at this point.
     * <p/>
     * TODO: Call {@link #initialize(Context)} from an entry point in your app
     * before using this!
     */
    public static final class AnalyticsTrackers {

        public enum Target {
            APP,
            // Add more trackers here if you need, and update the code in #get(Target) below
        }

        private static AnalyticsTrackers sInstance;

        public static synchronized void initialize(Context context) {
            if (sInstance != null) {
                throw new IllegalStateException("Extra call to initialize analytics trackers");
            }

            sInstance = new AnalyticsTrackers(context);
        }

        public static synchronized AnalyticsTrackers getInstance() {
            if (sInstance == null) {
                throw new IllegalStateException("Call initialize() before getInstance()");
            }

            return sInstance;
        }

        private final Map<Target, Tracker> mTrackers = new HashMap<Target, Tracker>();
        private final Context mContext;

        /**
         * Don't instantiate directly - use {@link #getInstance()} instead.
         */
        private AnalyticsTrackers(Context context) {
            mContext = context.getApplicationContext();
        }

        public synchronized Tracker get(Target target) {
            if (!mTrackers.containsKey(target)) {
                Tracker tracker;
                switch (target) {
                    case APP:
                        tracker = GoogleAnalytics.getInstance(mContext).newTracker(R.xml.app_tracker);
                        tracker.enableAdvertisingIdCollection(true);
                        break;
                    default:
                        throw new IllegalArgumentException("Unhandled analytics target " + target);
                }
                mTrackers.put(target, tracker);
            }

            return mTrackers.get(target);
        }
    }
}
